project:
  name: "Flask Rental Portal"
  description: >
    A web application that connects **tenants and landlords**, allowing them to find one another, 
    rate each other, and manage rental history transparently. The system includes a **TenantScore**, 
    which evaluates tenants based on **payment history, ratings from landlords, and creditworthiness**. 
    The portal integrates a **mutual rating system** where landlords rate tenants (0-5 stars), 
    and tenants rate landlords (0-5 stars). The project follows a **modular architecture**, ensuring 
    **scalability, security, and efficient database management**.

  features:
    - "User authentication and registration (Landlord, Tenant)"
    - "Mutual rating system (0-5 stars) for tenants and landlords"
    - "TenantScore system based on credit history and payment records"
    - "Flask backend with PostgreSQL database and connection pooling"
    - "REST API endpoints for rating, retrieving scores, and managing users"
    - "Frontend UI with Bootstrap, HTML, CSS, and JavaScript"
    - "Database schema designed for efficient data retrieval and analytics"
    - "Secure API with input validation and error handling"
    - "Nginx reverse proxy deployment on Ubuntu"
    - "Logging and monitoring for debugging and performance tracking"

  tech_stack:
    backend:
      framework: "Flask"
      database: "PostgreSQL"
      ORM: "SQLAlchemy"
      authentication: "Flask-Login, Flask-WTF"
      API: "RESTful endpoints"
      deployment: "Gunicorn, Nginx"
    
    frontend:
      framework: "HTML, CSS, JavaScript"
      UI: "Bootstrap-based, responsive design"
      interactions: "Fetch API for AJAX requests"
      visualization: "Progress bars for ratings display"
    
    devops:
      database_management: "PostgreSQL with connection pooling"
      environment_management: ".env for sensitive configurations"
      logging: "Python logging module for error tracking"
      security: "SQL injection prevention, rate limiting"

  database:
    connection_management: "Connection pooling using psycopg2"
    schema:
      tables:
        Users:
          columns:
            - "id: Primary Key, UUID"
            - "name: String, 100 characters"
            - "role: Enum (tenant, landlord)"
            - "created_at: Timestamp, default CURRENT_TIMESTAMP"

        Ratings:
          columns:
            - "id: Primary Key, UUID"
            - "rater_id: Foreign Key (Users.id)"
            - "ratee_id: Foreign Key (Users.id)"
            - "reliability: Integer (0-5)"
            - "responsibility: Integer (0-5)"
            - "communication: Integer (0-5)"
            - "respect: Integer (0-5)"
            - "compliance: Integer (0-5)"
            - "review: Text"
            - "property_id: Foreign Key (Properties.id)"
            - "created_at: Timestamp, default CURRENT_TIMESTAMP"

        TenantScore:
          columns:
            - "id: Primary Key, UUID"
            - "tenant_id: Foreign Key (Users.id)"
            - "credit_score: Float (0-100)"
            - "payment_history: JSON (list of past payments)"
            - "updated_at: Timestamp, default CURRENT_TIMESTAMP"

        Properties:
          columns:
            - "id: Primary Key, UUID"
            - "landlord_id: Foreign Key (Users.id)"
            - "title: String, 200 characters"
            - "description: Text"
            - "address: String, 200 characters"
            - "monthly_rent: Decimal"
            - "available_from: Date"
            - "created_at: Timestamp, default CURRENT_TIMESTAMP"
            - "updated_at: Timestamp, default CURRENT_TIMESTAMP"

  routes:
    authentication:
      - "POST /register - Register a new tenant or landlord"
      - "POST /login - User authentication"
      - "POST /logout - User logout"

    ratings:
      - "POST /rate-tenant - Landlord rates a tenant (0-5 stars)"
      - "POST /rate-landlord - Tenant rates a landlord (0-5 stars)"
      - "GET /ratings/<user_id> - Get all ratings for a user"
      - "GET /ratings/given/<user_id> - Get ratings given by user"

    tenant_score:
      - "GET /tenant-score/<tenant_id> - Retrieve a tenant's score"
      - "GET /api/tenant-score/<tenant_id> - Get tenant's credit score"

    properties:
      - "GET /api/properties - List all properties"
      - "GET /api/properties?landlord_id=<id> - List landlord's properties"
      - "POST /api/properties - Create new property"
      - "PUT /api/properties/<id> - Update property"
      - "DELETE /api/properties/<id> - Delete property"

  ui:
    dashboard: "Tenant and Landlord ratings overview"
    forms:
      - "Tenant rating form (landlord submits)"
      - "Landlord rating form (tenant submits)"
    visualization:
      - "TenantScore displayed as progress bars"
      - "Credit score displayed as gauge/meter"
      - "Rating dimensions shown as progress bars"

  deployment:
    steps:
      - "Set up Ubuntu 24.04.1 LTS server"
      - "Run Flask app with Gunicorn"
      - "Deploy using Nginx as reverse proxy"
      - "Configure SSL certificates"
      - "Monitor logs and optimize performance"

  testing:
    - "Unit tests for database models"
    - "Integration tests for API routes"
    - "Frontend UI testing with Selenium"
    - "Load testing to handle multiple ratings at once"

